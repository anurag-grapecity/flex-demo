{"ast":null,"code":"import { MeCompsComponent } from './components/me-comps/me-comps.component';\nimport { MeCompsComponentCV } from './components/me-compscv/me-compscv.component';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"topTable\"];\nconst _c1 = [\"bottomTable\"];\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    meCompsTableComponent;\n    meCompsCVTableComponent;\n    title = 'FlexGrid Demo Application';\n    selectedRow = '1';\n    componentId = 'Comp1';\n    offsetHeight;\n    splitterMoveCount = 0;\n    selecteRowChanged(row) {\n      this.selectedRow = row;\n    }\n    componentChanged(id) {\n      this.componentId = id;\n    }\n    dragStart() {\n      this.splitterMoveCount = 0;\n      this.offsetHeight = 0;\n      if (this.meCompsTableComponent !== null) {\n        this.offsetHeight = this.meCompsTableComponent.flex.hostElement.offsetHeight;\n      }\n    }\n    dragBetweenTables() {\n      this.splitterMoveCount++;\n      let currentOffsetHeight = 0;\n      // only refresh the tables if the splitter has been moved 10 times \n      // to cut down on table refreshes.         \n      if (this.splitterMoveCount % 10 === 0) {\n        this.refreshTables();\n      }\n    }\n    dragEnd() {\n      this.refreshTables();\n    }\n    refreshTables() {\n      // the idea here is to only refresh the top table if the splitter is moved dowm or\n      // the bottom table if ths splitter is moved up. The table itself handles refreshing \n      // properly if the table height is getting smaller\n      if (this.meCompsTableComponent !== null) {\n        let currentOffsetHeight = this.meCompsTableComponent.flex.hostElement.offsetHeight;\n        if (currentOffsetHeight > this.offsetHeight) {\n          this.meCompsTableComponent.onResize();\n        } else if (currentOffsetHeight < this.offsetHeight && this.meCompsCVTableComponent !== null) {\n          this.meCompsCVTableComponent.onResize();\n        }\n      }\n    }\n    static ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)();\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      viewQuery: function AppComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.meCompsTableComponent = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.meCompsCVTableComponent = _t.first);\n        }\n      },\n      decls: 8,\n      vars: 4,\n      consts: [[2, \"height\", \"100%\", \"overflow-y\", \"hidden\"], [\"id\", \"splitterHorizontal\", \"direction\", \"vertical\", \"gutterSize\", \"8\", 3, \"dragProgress\", \"dragStart\", \"dragEnd\"], [\"id\", \"topTable\", 3, \"size\"], [3, \"rowId\", \"componentId\", \"componentChanged\"], [\"topTable\", \"\"], [\"id\", \"bottomTable\", 3, \"size\"], [3, \"selectedRowChanged\"], [\"bottomTable\", \"\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"split\", 1);\n          i0.ɵɵlistener(\"dragProgress\", function AppComponent_Template_split_dragProgress_1_listener() {\n            return ctx.dragBetweenTables();\n          })(\"dragStart\", function AppComponent_Template_split_dragStart_1_listener() {\n            return ctx.dragStart();\n          })(\"dragEnd\", function AppComponent_Template_split_dragEnd_1_listener() {\n            return ctx.dragEnd();\n          });\n          i0.ɵɵelementStart(2, \"split-area\", 2)(3, \"me-comps\", 3, 4);\n          i0.ɵɵlistener(\"componentChanged\", function AppComponent_Template_me_comps_componentChanged_3_listener($event) {\n            return ctx.componentChanged($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"split-area\", 5)(6, \"me-compscv\", 6, 7);\n          i0.ɵɵlistener(\"selectedRowChanged\", function AppComponent_Template_me_compscv_selectedRowChanged_6_listener($event) {\n            return ctx.selecteRowChanged($event);\n          });\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"size\", 50);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"rowId\", ctx.selectedRow)(\"componentId\", ctx.componentId);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"size\", 50);\n        }\n      }\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}