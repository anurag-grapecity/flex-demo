{"ast":null,"code":"import _asyncToGenerator from \"D:/source/wcc-cds/flexgriddemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\n// third party\nimport * as wjcCore from 'wijmo/wijmo';\nimport * as wjGrid from 'wijmo/wijmo.grid';\nimport { WjFlexGrid } from 'wijmo/wijmo.angular2.grid';\n// local\nimport { MethodService } from '../../services/method.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/method.service\";\nconst _c0 = [\"compsflex\"];\nfunction MeCompsComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const cell_r3 = ctx.cell;\n    i0.ɵɵtextInterpolate1(\" \", cell_r3.row.index + 1, \" \");\n  }\n}\nfunction MeCompsComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorMessage, \" \");\n  }\n}\nexport let MeCompsComponent = /*#__PURE__*/(() => {\n  class MeCompsComponent {\n    methodService;\n    flex;\n    rowId;\n    componentId;\n    componentChanged = new EventEmitter(true);\n    info;\n    data;\n    errorMessage;\n    rowToSelect;\n    fromOnGridInit;\n    constructor(methodService) {\n      this.methodService = methodService;\n      this.fromOnGridInit = false;\n      this.rowId = '1';\n    }\n    ngOnInit() {\n      this.rowToSelect = -1;\n      this.onGridInit();\n    }\n    ngOnDestroy() {\n      if (this.flex !== undefined && this.flex !== null) {\n        this.flex.onLoadedRows = null;\n      }\n    }\n    onGridInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // need to turn off selection mode when giving table new data as the \n          // table insists on calling onSelectionChanged with the wrong selected row number            \n          _this.flex.selectionMode = wjGrid.SelectionMode.None;\n          if (_this.rowId == undefined) {\n            return;\n          }\n          _this.info = yield _this.methodService.getComponentsAsync(_this.rowId);\n          if (_this.info === undefined || _this.info === null) {\n            _this.errorMessage = 'Error getting data';\n            return;\n          }\n          _this.createColumns(_this.info);\n          _this.data = new wjcCore.ObservableArray(_this.info.data);\n          _this.rowToSelect = 0;\n          if (_this.info != null && _this.info.data != null) {\n            for (let i = 0; i < _this.info.data.length; i++) {\n              if (_this.componentId === _this.info.data[i].name) {\n                _this.rowToSelect = i;\n                console.log(\"row to select\", _this.rowToSelect);\n                break;\n              }\n            }\n            _this.fromOnGridInit = true;\n            _this.flex.onLoadedRows = e => _this.onLoadedRows(e);\n          }\n        } catch (error) {\n          _this.errorMessage = error;\n        }\n      })();\n    }\n    onLoadedRows(e) {\n      if (!this.fromOnGridInit || this.flex.rows == undefined || this.flex.rows == null || this.flex.rows.length <= this.rowToSelect) return;\n      // need to turn back on row selection mode here!!\n      // ListBox mode allows deleting multiple rows at once\n      this.flex.selectionMode = wjGrid.SelectionMode.ListBox;\n      this.flex.scrollIntoView(this.rowToSelect, 0);\n      this.flex.select(this.rowToSelect, 0);\n      //this.flex.focus();\n      this.fromOnGridInit = false;\n    }\n    createColumns(info) {\n      this.flex.autoGenerateColumns = false;\n      this.flex.columns.clear();\n      for (let i = 0; i < info.columns.length; i++) {\n        this.flex.columns.push(new wjGrid.Column({\n          binding: info.columns[i].bindingKey,\n          header: info.columns[i].label,\n          width: '*',\n          minWidth: 20\n        }));\n      }\n    }\n    onDelete() {\n      //This doesn't work; removes correct number of rows, but wrong ones.\n      //Selection gets changed during deletion?\n      //for (let i = this.flex.selectedRows.length - 1; i >= 0; i--) \n      //{\n      //this.data.removeAt(this.flex.selectedRows[i].index);\n      //this.flex.refresh();\n      //}\n      var selected = [];\n      for (var i = 0; i < this.flex.selectedRows.length; i++) {\n        selected.push(this.flex.selectedRows[i]._idx);\n      }\n      for (var i = selected.length - 1; i >= 0; i--) {\n        this.data.removeAt(selected[i]);\n      }\n      //this.flex.focus();\n    }\n    onSelectionChanged(e) {\n      if (e.row !== -1) {\n        let name = this.flex.rows[e.row].dataItem.name;\n        this.componentChanged.emit(name);\n      }\n    }\n    onResize() {\n      this.flex.refresh();\n    }\n    static ɵfac = function MeCompsComponent_Factory(t) {\n      return new (t || MeCompsComponent)(i0.ɵɵdirectiveInject(i1.MethodService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MeCompsComponent,\n      selectors: [[\"me-comps\"]],\n      viewQuery: function MeCompsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.flex = _t.first);\n        }\n      },\n      inputs: {\n        rowId: \"rowId\",\n        componentId: \"componentId\"\n      },\n      outputs: {\n        componentChanged: \"componentChanged\"\n      },\n      decls: 9,\n      vars: 3,\n      consts: [[\"id\", \"divMethodCompsContent\", 2, \"height\", \"100%\", \"overflow-y\", \"hidden\"], [3, \"click\"], [\"id\", \"tableComponents\", 1, \"theight\", 3, \"itemsSource\", \"selectionChanged\"], [\"compsflex\", \"\"], [\"wjFlexGridCellTemplate\", \"\", 3, \"cellType\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n      template: function MeCompsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n          i0.ɵɵtext(2, \"Table using ObservableArray\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function MeCompsComponent_Template_button_click_3_listener() {\n            return ctx.onDelete();\n          });\n          i0.ɵɵtext(4, \"Delete seleected rows\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"wj-flex-grid\", 2, 3);\n          i0.ɵɵlistener(\"selectionChanged\", function MeCompsComponent_Template_wj_flex_grid_selectionChanged_5_listener($event) {\n            return ctx.onSelectionChanged($event);\n          });\n          i0.ɵɵtemplate(7, MeCompsComponent_ng_template_7_Template, 1, 1, \"ng-template\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(8, MeCompsComponent_div_8_Template, 2, 1, \"div\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"itemsSource\", ctx.data);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"cellType\", \"RowHeader\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      styles: [\".theight[_ngcontent-%COMP%]{height:calc(100% - 100px)}\"]\n    });\n  }\n  return MeCompsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}