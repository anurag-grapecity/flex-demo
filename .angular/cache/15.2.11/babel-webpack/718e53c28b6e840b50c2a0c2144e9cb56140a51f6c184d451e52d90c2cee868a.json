{"ast":null,"code":"import _asyncToGenerator from \"D:/source/wcc-cds/flexgriddemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// tslint:disable\nimport { EventEmitter } from \"@angular/core\";\n// third party\nimport * as wjcCore from \"wijmo/wijmo\";\nimport * as wjGrid from \"wijmo/wijmo.grid\";\nimport { WjFlexGrid } from \"wijmo/wijmo.angular2.grid\";\n// local\nimport { MethodService } from \"../../services/method.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/method.service\";\nconst _c0 = [\"compsflex\"];\nfunction MeCompsComponentCV_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const cell_r3 = ctx.cell;\n    i0.ɵɵtextInterpolate1(\" \", cell_r3.row.index + 1, \" \");\n  }\n}\nfunction MeCompsComponentCV_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorMessage, \" \");\n  }\n}\nexport let MeCompsComponentCV = /*#__PURE__*/(() => {\n  class MeCompsComponentCV {\n    methodService;\n    flex;\n    selectedRowChanged = new EventEmitter();\n    info;\n    //data: wjcCore.ObservableArray;\n    data;\n    errorMessage;\n    constructor(methodService) {\n      this.methodService = methodService;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {}\n    ngOnDestroy() {}\n    onGridInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          _this.info = yield _this.methodService.getComponentsAsync(\"1\");\n          if (_this.info === undefined || _this.info === null) {\n            _this.errorMessage = \"Error getting data\";\n            return;\n          }\n          _this.createColumns(_this.info);\n          _this.data = new wjcCore.CollectionView(_this.info.data);\n          _this.data.trackChanges = true;\n        } catch (error) {\n          _this.errorMessage = error;\n        }\n      })();\n    }\n    createColumns(info) {\n      this.flex.autoGenerateColumns = false;\n      this.flex.columns.clear();\n      for (let i = 0; i < info.columns.length; i++) {\n        this.flex.columns.push(new wjGrid.Column({\n          binding: info.columns[i].bindingKey,\n          header: info.columns[i].label,\n          width: \"*\",\n          minWidth: 20\n        }));\n      }\n    }\n    onSelectionChanged(e) {\n      let row = e.row + 1;\n      this.selectedRowChanged.emit(row);\n    }\n    onResize() {\n      this.flex.refresh();\n    }\n    beforeunloadHandler($event) {\n      console.log($event);\n      // When $event.returnValue is set to true then a web confirm dialog box will\n      // be shown. If the user really does want to leave the unload event will be\n      // fired and we will save the method synchronously.\n      $event.returnValue = true;\n      return true;\n    }\n    unloadHandler($event) {\n      // Save the method synchronously (async won't work since the tab/browsewr\n      // won't exist anymore).\n      console.log(\"unloaded\");\n    }\n    static ɵfac = function MeCompsComponentCV_Factory(t) {\n      return new (t || MeCompsComponentCV)(i0.ɵɵdirectiveInject(i1.MethodService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MeCompsComponentCV,\n      selectors: [[\"me-compscv\"]],\n      viewQuery: function MeCompsComponentCV_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.flex = _t.first);\n        }\n      },\n      hostBindings: function MeCompsComponentCV_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"beforeunload\", function MeCompsComponentCV_beforeunload_HostBindingHandler($event) {\n            return ctx.beforeunloadHandler($event);\n          }, false, i0.ɵɵresolveWindow)(\"unload\", function MeCompsComponentCV_unload_HostBindingHandler($event) {\n            return ctx.unloadHandler($event);\n          }, false, i0.ɵɵresolveWindow);\n        }\n      },\n      outputs: {\n        selectedRowChanged: \"selectedRowChanged\"\n      },\n      decls: 7,\n      vars: 3,\n      consts: [[\"id\", \"divMethodCompsContentCV\", 2, \"height\", \"100%\", \"overflow-y\", \"hidden\"], [\"id\", \"tableComponentsCV\", \"selectionMode\", \"ListBox\", 1, \"theight\", 3, \"itemsSource\", \"initialized\", \"selectionChanged\"], [\"compsflex\", \"\"], [\"wjFlexGridCellTemplate\", \"\", 3, \"cellType\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"]],\n      template: function MeCompsComponentCV_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\");\n          i0.ɵɵtext(2, \"Table using CollectionView\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"wj-flex-grid\", 1, 2);\n          i0.ɵɵlistener(\"initialized\", function MeCompsComponentCV_Template_wj_flex_grid_initialized_3_listener() {\n            return ctx.onGridInit();\n          })(\"selectionChanged\", function MeCompsComponentCV_Template_wj_flex_grid_selectionChanged_3_listener($event) {\n            return ctx.onSelectionChanged($event);\n          });\n          i0.ɵɵtemplate(5, MeCompsComponentCV_ng_template_5_Template, 1, 1, \"ng-template\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, MeCompsComponentCV_div_6_Template, 2, 1, \"div\", 4);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"itemsSource\", ctx.data);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"cellType\", \"RowHeader\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      styles: [\".theight[_ngcontent-%COMP%]{height:calc(100% - 100px)}\"]\n    });\n  }\n  return MeCompsComponentCV;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}