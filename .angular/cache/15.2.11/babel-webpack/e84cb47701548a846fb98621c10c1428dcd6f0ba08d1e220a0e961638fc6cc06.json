{"ast":null,"code":"import _asyncToGenerator from \"D:/source/wcc-cds/flexgriddemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport * as i0 from \"@angular/core\";\nexport let MethodService = /*#__PURE__*/(() => {\n  class MethodService {\n    http;\n    baseUrl;\n    methodBaseUrl;\n    headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n    options = new RequestOptions({\n      headers: this.headers\n    });\n    selectedComponentId;\n    selectedProcCompId;\n    constructor(http) {\n      this.http = http;\n    }\n    getComponentsAsync(methodId) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          for (let i = 0; i < 10000000; i++) {}\n          if (methodId == '1' || methodId == '3' || methodId == '5') {\n            return yield _this.compsData;\n          } else {\n            return yield _this.compsData2;\n          }\n        } catch (error) {\n          throw _this.handleError(error);\n        }\n      })();\n    }\n    handleError(error) {\n      let msg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : error;\n      console.error(msg);\n      return msg;\n    }\n    compsData = {\n      'columns': [{\n        'id': 0,\n        'bindingKey': 'name',\n        'label': 'Name'\n      }, {\n        'id': 1,\n        'bindingKey': 'label',\n        'label': 'Label'\n      }, {\n        'id': 2,\n        'bindingKey': 'expectedRetTime',\n        'label': 'Expected RT'\n      }, {\n        'id': 3,\n        'bindingKey': 'expectedWavelength',\n        'label': 'Expected Wavelength'\n      }, {\n        'id': 4,\n        'bindingKey': 'description',\n        'label': 'Description'\n      }],\n      'data': [{\n        'id': 1,\n        'name': 'Comp1',\n        'label': 'Label1',\n        'expectedRetTime': 1.1,\n        'expectedWavelength': 1.1,\n        'description': 'Description of Comp1'\n      }, {\n        'id': 2,\n        'name': 'Comp2',\n        'label': 'Label2',\n        'expectedRetTime': 2.2,\n        'expectedWavelength': 2.2,\n        'description': 'Description of Comp2'\n      }, {\n        'id': 3,\n        'name': 'Comp3',\n        'label': 'Label3',\n        'expectedRetTime': 3.3,\n        'expectedWavelength': 3.3,\n        'description': 'Description of Comp3'\n      }, {\n        'id': 4,\n        'name': 'Comp4',\n        'label': 'Label4',\n        'expectedRetTime': 4.4,\n        'expectedWavelength': 4.4,\n        'description': 'Description of Comp4'\n      }, {\n        'id': 5,\n        'name': 'Comp5',\n        'label': 'Label5',\n        'expectedRetTime': 5.5,\n        'expectedWavelength': 5.5,\n        'description': 'Description of Comp5'\n      }, {\n        'id': 6,\n        'name': 'Comp6',\n        'label': 'Label6',\n        'expectedRetTime': 6.6,\n        'expectedWavelength': 6.6,\n        'description': 'Description of Comp6'\n      }]\n    };\n    compsData2 = {\n      'columns': [{\n        'id': 0,\n        'bindingKey': 'name',\n        'label': 'Name'\n      }, {\n        'id': 1,\n        'bindingKey': 'label',\n        'label': 'Label'\n      }, {\n        'id': 2,\n        'bindingKey': 'expectedRetTime',\n        'label': 'Expected RT'\n      }, {\n        'id': 3,\n        'bindingKey': 'expectedWavelength',\n        'label': 'Expected Wavelength'\n      }, {\n        'id': 4,\n        'bindingKey': 'description',\n        'label': 'Description'\n      }],\n      'data': [{\n        'id': 1,\n        'name': 'Comp1',\n        'label': 'Label1111',\n        'expectedRetTime': 1.1111,\n        'expectedWavelength': 1.11111,\n        'description': 'Description of Comp11111111'\n      }, {\n        'id': 2,\n        'name': 'Comp2',\n        'label': 'Label222222',\n        'expectedRetTime': 2.22222,\n        'expectedWavelength': 2.2222,\n        'description': 'Description of Comp22222'\n      }, {\n        'id': 3,\n        'name': 'Comp3',\n        'label': 'Label3333',\n        'expectedRetTime': 3.33333,\n        'expectedWavelength': 3.3333,\n        'description': 'Description of Comp3333'\n      }, {\n        'id': 4,\n        'name': 'Comp4',\n        'label': 'Label4444',\n        'expectedRetTime': 4.4444,\n        'expectedWavelength': 4.44444,\n        'description': 'Description of Comp4444'\n      }, {\n        'id': 5,\n        'name': 'Comp5',\n        'label': 'Label5555',\n        'expectedRetTime': 5.5555,\n        'expectedWavelength': 5.55555,\n        'description': 'Description of Comp5555'\n      }, {\n        'id': 6,\n        'name': 'Comp6',\n        'label': 'Label6666',\n        'expectedRetTime': 6.6666,\n        'expectedWavelength': 6.6666,\n        'description': 'Description of Comp6666'\n      }]\n    };\n    static ɵfac = function MethodService_Factory(t) {\n      i0.ɵɵinvalidFactory();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MethodService,\n      factory: MethodService.ɵfac\n    });\n  }\n  return MethodService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}